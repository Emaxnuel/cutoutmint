[{"E:\\Chamba\\Cutout\\NFT Market\\Web\\dashboard-cutout-final\\cutout\\pages\\api\\hello.js":"1","E:\\Chamba\\Cutout\\NFT Market\\Web\\dashboard-cutout-final\\cutout\\pages\\index.js":"2","E:\\Chamba\\Cutout\\NFT Market\\Web\\dashboard-cutout-final\\cutout\\pages\\_app.js":"3","E:\\Chamba\\Cutout\\NFT Market\\Web\\dashboard-cutout-final\\cutout\\pages\\create-item.js":"4"},{"size":170,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":5180,"mtime":1637263470000,"results":"7","hashOfConfig":"6"},{"size":1004,"mtime":1637263472000,"results":"8","hashOfConfig":"6"},{"size":5579,"mtime":1637263474000,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"8v35rd",{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"E:\\Chamba\\Cutout\\NFT Market\\Web\\dashboard-cutout-final\\cutout\\pages\\api\\hello.js",[],"E:\\Chamba\\Cutout\\NFT Market\\Web\\dashboard-cutout-final\\cutout\\pages\\index.js",["20","21"],"import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n//import Web3Modal from \"web3modal\";\n\nimport {\n  nftaddress, nftmarketaddress\n} from \"../config\";\n\nimport CutoutNFTFactory from '../abi/CutoutNFTFactory.json';\nimport CutoutMarket from '../abi/CutoutMarket.json';\n\n\nimport web3 from \"web3\";\nlet web3Metamask;\nlet metamaskAccounts;\nlet metamaskAccount;\n\n//const ganache = require(\"ganache-cli\");\nconst Web3 = require(\"web3\");\n\n//const ganacheProvider = new Web3(ganache.providers());\n\nexport default function Home() {\n  const [nfts, setNfts] = useState([]);\n  const [loadingState, setLoadingState] = useState('not-loaded');\n\n\n  \n  \n\n\n\n  useEffect(()=>{\n    if (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n      // We are in the browser and metamask is running.\n      window.ethereum.request({ method: \"eth_requestAccounts\" });\n      web3Metamask = new Web3(window.ethereum);\n    } else {\n      // We are on the server *OR* the user is not running metamask\n      const provider = new Web3.providers.HttpProvider(\n        \"https://rinkeby.infura.io/v3/3be8ee0f25324e1cbcf6e35f00f5b3ce\"\n      );\n      web3Metamask = new Web3(provider);\n    }  \n  \n    //metamaskAccounts = web3Metamask.eth.getAccounts();\n    //metamaskAccount = metamaskAccounts[0];\n    //console.log(\"MetamaskAccount\", metamaskAccount);\n  loadNFTs();\n\n  }, []);\n\n  const loadNFTs = async ()=> {\n    \n    //@params Este provider lo da Ganache Visual\n    //const provider = await new Web3.providers.HttpProvider('HTTP://127.0.0.1:7545');\n\n\n\n    const tokenContract = await new web3Metamask.eth.Contract(CutoutNFTFactory.abi, nftaddress);\n    const marketContract = await new web3Metamask.eth.Contract(CutoutMarket.abi, nftmarketaddress);\n    \n    console.log(\"Metodos\", CutoutNFTFactory.abi);\n    console.log(\"Metodos\", CutoutMarket.abi);\n\n    const data = await marketContract.methods.fetchMyNFTs().call()\n\n    console.log(\"Token Contract está en\", tokenContract.options.address)\n    console.log(\"Market Contract está en\", marketContract.options.address)\n\n    console.log(\"Esta es la data\", data)\n    \n\n    const items = await Promise.all(data.map(async i =>{\n        const tokenUri = await tokenContract.methods.tokenURI((i.tokenId)).call();\n        const meta = await axios.get(tokenUri);\n        let price = web3.utils.fromWei(i.price,'ether');\n\n        let item = {\n            price,\n            tokenId: i.tokenId,\n            seller: i.seller,\n            owner: i.owner,\n            image: meta.data.image,\n            name: meta.data.name,\n            description: meta.data.description,\n        }\n        console.log(\"El item es \",item);\n\n        return item;\n  }));\n  \n\n    setNfts(items);\n    setLoadingState('loaded');\n\n  };\n\n  const buyNft = async (nft)=>{\n        //const web3Modal = new Web3Modal();\n        //const connection = await web3Modal.connect();\n        //let providerMetamask;\n\n          // We are in the browser and metamask is running.\n         await window.ethereum.request({ method: \"eth_requestAccounts\" });\n         const providerMetamask = await new Web3(window.ethereum);\n\n\n        metamaskAccounts = await providerMetamask.eth.getAccounts();\n        metamaskAccount = metamaskAccounts[0];\n        \n        const marketContract = await new providerMetamask.eth.Contract(CutoutMarket.abi, nftmarketaddress);\n\n        const price = web3.utils.toWei(nft.price.toString(),'ether');\n\n        const transaction = await marketContract.methods.createMarketSale(nftaddress, nft.tokenId).send({\n          from: metamaskAccount,\n          value: price,\n        });\n\n        //await wait(transaction);\n        loadNFTs();\n\n  }\n\n  if(loadingState === 'loaded' && !nfts.length) return(\n    <h1 className=\"textoCutout px-20 py-10 text-3xl\">No hay items</h1>\n    \n  )\n\n  return (\n   <div className=\"flex justify-center\">\n     <div className=\"px-4\" style={{ maxWidth: '1600px'}}>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 pt-4\">\n                {\n\n                  nfts.map((nft, i)=>(\n\n                      <div key={i} className=\"border shadow rounded-xl overflow-hidden\">\n                        <img src={nft.image} />\n                        <div className=\"p-4\">\n                          <p style={{ height: '64px'}} className=\"text-2xl font-semibold\">{nft.name}</p>\n                          <div style={{ height: '70px', overflow: 'hidden'}}>\n                            <p className=\"text-gray-400\">{nft.description}</p>\n\n                          </div>\n                        </div>\n                        <div className=\"p-4 bg-black\">\n                          <p className=\"text-m mb-4 text-white\">Puja Actual</p>\n                          <p className=\"text-2xl mb-4 font-bold text-white\">{nft.price} ETH</p>\n                          <button className=\"w-full bg-black-500 text-white font-bold py-2 px-12 rounded\"\n                          onClick={()=> buyNft(nft)}>\n                            Oferta\n                          </button>\n                        </div>\n\n                      </div>\n\n                  ))\n\n                }\n\n        </div>\n\n\n     </div>\n\n   </div>\n  )\n}\n","E:\\Chamba\\Cutout\\NFT Market\\Web\\dashboard-cutout-final\\cutout\\pages\\_app.js",[],"E:\\Chamba\\Cutout\\NFT Market\\Web\\dashboard-cutout-final\\cutout\\pages\\create-item.js",["22","23"],"import { useState } from 'react';\r\nimport web3 from \"web3\";\r\nimport { create as ipfsHttpClient } from 'ipfs-http-client';\r\nimport { useRouter } from 'next/router';\r\n\r\n\r\nconst Web3 = require(\"web3\");\r\nlet web3Metamask;\r\nlet metamaskAccounts;\r\nlet metamaskAccount;\r\nlet currentAccount;\r\n\r\nconst client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0');\r\n\r\nimport {\r\n    nftaddress, nftmarketaddress\r\n  } from \"../config\";\r\n\r\nimport CutoutNFTFactory from '../abi/CutoutNFTFactory.json';\r\nimport CutoutMarket from '../abi/CutoutMarket.json';\r\n\r\n\r\nexport default function CreateItem (){\r\n\r\n\r\nconst connectAccount = async()=>{\r\n    try{\r\n    if (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\r\n        // We are in the browser and metamask is running.\r\n\r\n        await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n        web3Metamask = new Web3(window.ethereum);\r\n \r\n\r\n      } else {\r\n        // We are on the server *OR* the user is not running metamask\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"https://rinkeby.infura.io/v3/3be8ee0f25324e1cbcf6e35f00f5b3ce\"\r\n        );\r\n        web3Metamask = new Web3(provider);\r\n      }\r\n\r\n    } catch (err){\r\n\r\n        console.log(err)\r\n\r\n    }\r\n   \r\n    metamaskAccounts = await web3Metamask.eth.getAccounts();\r\n    metamaskAccount = metamaskAccounts[0];\r\n    console.log(\"MetamaskAccount\", metamaskAccount);\r\n   \r\n    }\r\n\r\n    connectAccount();\r\n\r\n    const [fileUrl, setFileUrl] = useState(null);\r\n    const [formInput, updateFormInput] = useState({ price: '', name: '', description: ''});\r\n    const router = useRouter();\r\n\r\n    console.log(\"Esta es nftaddress\", nftaddress);\r\n    console.log(\"Esta es nftmarketaddress\", nftmarketaddress);\r\n    \r\n    \r\n\r\n    const onChange = async (e)=>{\r\n        const file = e.target.files[0];\r\n        try{\r\n            const added = await client.add(\r\n                file,\r\n                {\r\n                    progress: (prog) => console.log(`received: ${prog}`)\r\n\r\n                }\r\n            )\r\n        const url = `https://ipfs.infura.io/ipfs/${added.path}`;\r\n        \r\n        setFileUrl(url)\r\n\r\n        } catch (e){\r\n            console.log(e)\r\n\r\n        }\r\n    };\r\n\r\n    const createItem = async ()=>{\r\n        const { name, description, price } = formInput;\r\n\r\n        if(!name || !description || !price || !fileUrl) return;\r\n\r\n        const data = JSON.stringify({\r\n            name, description, image: fileUrl\r\n        });\r\n\r\n        try{\r\n            const added = await client.add(data);\r\n        const url = `https://ipfs.infura.io/ipfs/${added.path}`;\r\n        \r\n        createSale(url)\r\n\r\n        } catch (error){\r\n            console.log(\"Error al subir el archivo: \", error);\r\n\r\n        }\r\n\r\n    };\r\n\r\n    const createSale = async (url)=> {\r\n\r\n\r\n          const tokenContract = await new web3Metamask.eth.Contract(CutoutNFTFactory.abi, nftaddress);\r\n          let transaction = await tokenContract.methods.createToken(url).send({from: metamaskAccount});\r\n          //console.log(transaction['events'])\r\n          //console.log(\"Token Id\", transaction['events'].Transfer.returnValues[2]);\r\n\r\n          //let event = transaction.events[0];\r\n          //let value = event.args[2];\r\n          let tokenId = await transaction['events'].Transfer.returnValues[2];\r\n\r\n          const price = web3.utils.toWei(formInput.price,'ether');\r\n\r\n          const marketContract = await new web3Metamask.eth.Contract(CutoutMarket.abi, nftmarketaddress);\r\n          let listingPrice = await marketContract.methods.getListingPrice().call({from: metamaskAccount});\r\n          listingPrice = listingPrice.toString();\r\n\r\n          transaction = await marketContract.methods.createMarketItem(nftaddress, tokenId, price).send({from: metamaskAccount, value: listingPrice});\r\n          console.log(\"Market Item\", transaction)\r\n          //await transaction.wait();\r\n          router.push('/')  \r\n        \r\n        }\r\n\r\n        return(\r\n\r\n            <div className=\"flex justify-center\">\r\n                <div className=\"w-1/2 flex flex-col pb-12\">\r\n\r\n                    <input\r\n                    placeholder=\"Nombre del NFT\"\r\n                    className=\"mt-8 border rounded p-4\"\r\n                    onChange={e => updateFormInput({ ...formInput, name: e.target.value })}\r\n                    />\r\n\r\n                    <textarea\r\n                    placeholder=\"Descripción\"\r\n                    className=\"mt-2 border rounded p-4\"\r\n                    onChange={e => updateFormInput({ ...formInput, description: e.target.value })}\r\n                    />\r\n\r\n                    <input\r\n                    placeholder=\"Precio de salida\"\r\n                    className=\"mt-8 border rounded p-4\"\r\n                    onChange={e => updateFormInput({ ...formInput, price: e.target.value })}\r\n                    />\r\n\r\n                    <input\r\n                    type=\"file\"\r\n                    name=\"NFT\"\r\n                    className=\"my-4\"\r\n                    onChange={onChange}\r\n                    />\r\n\r\n                    {\r\n                      fileUrl && (\r\n                        <img className=\"rounded mt-4\" width=\"350\" src={fileUrl}/>\r\n\r\n                        )\r\n\r\n                    }\r\n\r\n                    <button\r\n                    onClick={createItem}\r\n                    className=\"font-bold mt-4 bg-black text-white rounded p-4 shadow-lg\"\r\n                    >\r\n                    Mint\r\n                    </button>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n        )\r\n\r\n\r\n}",{"ruleId":"24","severity":1,"message":"25","line":141,"column":25,"nodeType":"26","endLine":141,"endColumn":48},{"ruleId":"27","severity":1,"message":"28","line":141,"column":25,"nodeType":"26","endLine":141,"endColumn":48},{"ruleId":"24","severity":1,"message":"25","line":165,"column":25,"nodeType":"26","endLine":165,"endColumn":82},{"ruleId":"27","severity":1,"message":"28","line":165,"column":25,"nodeType":"26","endLine":165,"endColumn":82},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","@next/next/no-img-element","Do not use <img>. Use Image from 'next/image' instead. See https://nextjs.org/docs/messages/no-img-element."]